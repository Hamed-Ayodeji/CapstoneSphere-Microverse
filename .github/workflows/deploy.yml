name: Deploy Sockshop on AKS

on:
  workflow_dispatch:
    inputs:
      action:
        description: Action to perform
        required: true
        default: build
        type: choice
        options:
          - build
          - cleanup

permissions:
      id-token: write
      contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Azure CLI
        if: ${{ github.event.inputs.action == 'build' }}
        uses: pietrobolcato/install-azure-cli-action@v1.0.1

      - name: Install necessary tools
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip wget apt-transport-https gnupg2 software-properties-common git ca-certificates

      - name: Install Terraform
        if: ${{ github.event.inputs.action == 'build' }}
        uses: little-core-labs/install-terraform@v2.0.0
        with:
          version: 1.7.5

      - name: Install kubectl
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          sudo snap install kubectl --classic

      - name: Install Helm
        if: ${{ github.event.inputs.action == 'build' }}
        uses: Azure/setup-helm@v4
        with:
          version: v3.7.0
          token: ${{ github.token }}
          downloadBaseURL: https://get.helm.sh
          

      - name: Azure login
        if: ${{ github.event.inputs.action == 'build' }}
        run: az login

      - name: Terraform setup and apply/destroy (infrastructure)
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          if [ -d "infrastructure" ]; then
            cd infrastructure && \
            terraform init || { echo "Terraform initialization failed"; exit 1; } && \
            terraform validate || { echo "Terraform validation failed"; exit 1; } && \
            terraform plan -out=tfplan || { echo "Terraform planning failed"; exit 1; } && \
            terraform apply tfplan || { echo "Terraform apply failed"; exit 1; }
          else
            echo "The 'infrastructure' directory does not exist."
            exit 1
          fi

      - name: Wait for k8s cluster to be ready
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 60

      - name: Get AKS credentials
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          az aks get-credentials --resource-group capstonerg --name capstoneaks

      - name: Terraform setup and apply/destroy (helm_charts)
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          if [ -d "helm_charts" ]; then
            cd helm_charts && \
            terraform init || { echo "Terraform initialization failed"; exit 1; } && \
            terraform validate || { echo "Terraform validation failed"; exit 1; } && \
            terraform plan -out=tfplan || { echo "Terraform planning failed"; exit 1; } && \
            terraform apply tfplan || { echo "Terraform apply failed"; exit 1; }
          else
            echo "The 'helm_charts' directory does not exist."
            exit 1
          fi

      - name: Apply microservices YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd microservices && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply microservices YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying microservices YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Apply letsencrypt YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd letsencrypt && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply letsencrypt YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying letsencrypt YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Apply argocd YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd argocd && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply argocd YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying argocd YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Apply nginx-ingress YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd ingress && \
          attempt=1 && \
          until kubectl apply -f nginx-ingress.yml; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply nginx-ingress YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying nginx-ingress YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for nginx-ingress to be ready
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 30

      - name: Apply sock-shop YAML in ingress directory
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd ingress && \
          attempt=1 && \
          until kubectl apply -f sock-shop.yml; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply sock-shop YAML in ingress directory after 2 attempts"
              exit 1
            fi
            echo "Retrying applying sock-shop YAML in ingress directory (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Prometheus Stack YAMLs
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 10

      - name: Apply Prometheus Stack CRDs
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd prometheus_stack/crds && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Prometheus Stack CRDs after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Prometheus Stack CRDs (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Prometheus Operator YAMLs
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 10

      - name: Apply Prometheus Operator YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd prometheus_stack/prometheus-operator && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Prometheus Operator YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Prometheus Operator YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Prometheus YAMLs
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 10

      - name: Apply Prometheus YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd prometheus_stack/prometheus && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Prometheus YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Prometheus YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Grafana YAMLs
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 10

      - name: Apply Grafana YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd prometheus_stack/grafana && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Grafana YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Grafana YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Alert Manager YAMLs
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 10

      - name: Apply Alert Manager YAML
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd prometheus_stack/alertmanager && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Alert Manager YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Alert Manager YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying ELK Stack YAMLs
        if: ${{ github.event.inputs.action == 'build' }}
        run: sleep 10

      - name: Apply namespace.yaml in elk_stack directory
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd elk_stack && \
          kubectl apply -f namespace.yaml || kubectl apply -f namespace.yaml

      - name: Apply other YAML files in elk_stack directory
        if: ${{ github.event.inputs.action == 'build' }}
        run: |
          cd elk_stack && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply YAML files in elk_stack directory after 2 attempts"
              exit 1
            fi
            echo "Retrying applying YAML files in elk_stack directory (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Clean up
        if: ${{ github.event.inputs.action == 'cleanup' }}
        run: |
          if [ -d "helm_charts" ]; then
            cd helm_charts && \
            terraform destroy -auto-approve || { echo "Terraform destroy failed"; exit 1; }
          else
            echo "The 'helm_charts' directory does not exist."
            exit 1
          fi

          if [ -d "infrastructure" ]; then
            cd infrastructure && \
            terraform destroy -auto-approve || { echo "Terraform destroy failed"; exit 1; }
          else
            echo "The 'infrastructure' directory does not exist."
            exit 1
          fi
