name: Deploy Sockshop on AKS

on:
  workflow_dispatch:
    inputs:
      action:
        description: Action to perform
        required: true
        default: build
        type: choice
        options:
          - build
          - cleanup

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Azure CLI
        uses: azure/CLI@v1
        with:
          inlineScript: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y curl && \
          curl -LO https://releases.hashicorp.com/terraform/$(curl -s https://releases.hashicorp.com/terraform/ | grep -oE 'terraform_[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n1)/terraform_$(curl -s https://releases.hashicorp.com/terraform/ | grep -oE 'terraform_[0-9]+\.[0-9]+\.[0-9]+' | sort -V | tail -n1)_linux_amd64.zip && \
          unzip terraform_*.zip && \
          sudo mv terraform /usr/local/bin/ && \
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common && \
          curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - && \
          sudo apt-add-repository "deb https://apt.kubernetes.io/kubernetes-xenial main" && \
          sudo apt-get update && \
          sudo apt-get install -y kubectl && \
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && \
          chmod 700 get_helm.sh && \
          ./get_helm.sh

      - name: Login to Azure
        run: >-
          az login --service-principal -u $(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r .clientId) -p $(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r .clientSecret) --tenant $(echo ${{ secrets.AZURE_CREDENTIALS }} | jq -r .tenantId)

      - name: Get Azure Subscription ID
        run: |
          SUBSCRIPTION_ID=$(az account show --query 'id' -o tsv)
          echo "::set-output name=subscription_id::$SUBSCRIPTION_ID"

      - name: Terraform setup and apply/destroy (infrastructure)
        run: |
          cd infrastructure && \
          terraform init || { echo "Terraform initialization failed"; exit 1; } && \
          terraform validate || { echo "Terraform validation failed"; exit 1; } && \
          if [ "${{ github.event.inputs.action }}" = "build" ]; then
            terraform plan -out=tfplan || { echo "Terraform planning failed"; exit 1; } && \
            terraform apply tfplan || { echo "Terraform apply failed"; exit 1; } && \
          elif [ "${{ github.event.inputs.action }}" = "cleanup" ]; then
            terraform destroy -auto-approve || { echo "Terraform destroy failed"; exit 1; }
          fi

      - name: Terraform setup and apply/destroy (helm_charts)
        run: |
          cd helm_charts && \
          terraform init || { echo "Terraform initialization failed"; exit 1; } && \
          terraform validate || { echo "Terraform validation failed"; exit 1; } && \
          if [ "${{ github.event.inputs.action }}" = "build" ]; then
            terraform plan -out=tfplan || { echo "Terraform planning failed"; exit 1; } && \
            terraform apply tfplan || { echo "Terraform apply failed"; exit 1; } && \
          elif [ "${{ github.event.inputs.action }}" = "cleanup" ]; then
            terraform destroy -auto-approve || { echo "Terraform destroy failed"; exit 1; }
          fi

      - name: Extract subscriptionId
        id: extract_sub
        run: echo "::set-output name=subscription_id::$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')"
        shell: bash

      - name: Get AKS credentials
        id: get_credentials
        uses: azure/aks-set-context@v1
        with:
            subscriptionId: ${{ steps.extract_sub.outputs.subscription_id }}
            resource-group: capstonerg
            cluster-name: capstoneaks

      - name: Apply microservices YAML
        run: |
          cd microservices && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply microservices YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying microservices YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Apply letsencrypt YAML
        run: |
          cd letsencrypt && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply letsencrypt YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying letsencrypt YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Apply argocd YAML
        run: |
          cd argocd && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply argocd YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying argocd YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Apply nginx-ingress YAML
        run: |
          cd ingress && \
          attempt=1 && \
          until kubectl apply -f nginx-ingress.yml; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply nginx-ingress YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying nginx-ingress YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for nginx-ingress to be ready
        run: sleep 30

      - name: Apply sock-shop YAML in ingress directory
        run: |
          cd ingress && \
          attempt=1 && \
          until kubectl apply -f sock-shop.yml; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply sock-shop YAML in ingress directory after 2 attempts"
              exit 1
            fi
            echo "Retrying applying sock-shop YAML in ingress directory (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Prometheus Stack YAMLs
        run: sleep 10

      - name: Apply Prometheus Stack CRDs
        run: |
          cd prometheus_stack/crds && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Prometheus Stack CRDs after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Prometheus Stack CRDs (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Prometheus Operator YAMLs
        run: sleep 10

      - name: Apply Prometheus Operator YAML
        run: |
          cd prometheus_stack/prometheus-operator && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Prometheus Operator YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Prometheus Operator YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Prometheus YAMLs
        run: sleep 10

      - name: Apply Prometheus YAML
        run: |
          cd prometheus_stack/prometheus && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Prometheus YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Prometheus YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Grafana YAMLs
        run: sleep 10

      - name: Apply Grafana YAML
        run: |
          cd prometheus_stack/grafana && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Grafana YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Grafana YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying Alert Manager YAMLs
        run: sleep 10

      - name: Apply Alert Manager YAML
        run: |
          cd prometheus_stack/alertmanager && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply Alert Manager YAML after 2 attempts"
              exit 1
            fi
            echo "Retrying applying Alert Manager YAML (attempt $attempt)"
            sleep 10
            ((attempt++))
          done

      - name: Wait for 10 seconds before applying ELK Stack YAMLs
        run: sleep 10

      - name: Apply namespace.yaml in elk_stack directory
        run: |
          cd elk_stack && \
          kubectl apply -f namespace.yaml || kubectl apply -f namespace.yaml

      - name: Apply other YAML files in elk_stack directory
        run: |
          cd elk_stack && \
          attempt=1 && \
          until kubectl apply -f .; do
            if [ $attempt -eq 2 ]; then
              echo "Failed to apply YAML files in elk_stack directory after 2 attempts"
              exit 1
            fi
            echo "Retrying applying YAML files in elk_stack directory (attempt $attempt)"
            sleep 10
            ((attempt++))
          done
